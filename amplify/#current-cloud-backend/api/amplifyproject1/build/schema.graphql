type Project @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  description: String
  Squad: Squad!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  projectSquadId: ID!
}

type Squad {
  id: ID!
  name: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Post @aws_cognito_user_pools @aws_api_key {
  id: ID!
  title: String!
  comments(content: ModelStringKeyConditionInput, filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  email: String
}

type Comment {
  id: ID!
  postID: ID!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelProjectConnection @aws_iam @aws_cognito_user_pools {
  items: [Project]!
  nextToken: String
}

input ModelProjectFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelProjectFilterInput]
  or: [ModelProjectFilterInput]
  not: ModelProjectFilterInput
  projectSquadId: ModelIDInput
}

type Query {
  getSquad(id: ID!): Squad
  listSquads(filter: ModelSquadFilterInput, limit: Int, nextToken: String): ModelSquadConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  commentsByPostIDAndContent(postID: ID!, content: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  getProject(id: ID!): Project @aws_iam @aws_cognito_user_pools
  listProjects(filter: ModelProjectFilterInput, limit: Int, nextToken: String): ModelProjectConnection @aws_iam @aws_cognito_user_pools
  getPost(id: ID!): Post @aws_api_key @aws_cognito_user_pools
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_api_key @aws_cognito_user_pools
}

input ModelProjectConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelProjectConditionInput]
  or: [ModelProjectConditionInput]
  not: ModelProjectConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  projectSquadId: ModelIDInput
}

input CreateProjectInput {
  id: ID
  name: String!
  description: String
  projectSquadId: ID!
}

input UpdateProjectInput {
  id: ID!
  name: String
  description: String
  projectSquadId: ID
}

input DeleteProjectInput {
  id: ID!
}

type Mutation {
  createSquad(input: CreateSquadInput!, condition: ModelSquadConditionInput): Squad
  updateSquad(input: UpdateSquadInput!, condition: ModelSquadConditionInput): Squad
  deleteSquad(input: DeleteSquadInput!, condition: ModelSquadConditionInput): Squad
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
  createProject(input: CreateProjectInput!, condition: ModelProjectConditionInput): Project @aws_iam @aws_cognito_user_pools
  updateProject(input: UpdateProjectInput!, condition: ModelProjectConditionInput): Project @aws_iam @aws_cognito_user_pools
  deleteProject(input: DeleteProjectInput!, condition: ModelProjectConditionInput): Project @aws_iam @aws_cognito_user_pools
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_cognito_user_pools
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_cognito_user_pools
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_cognito_user_pools
}

input ModelSubscriptionProjectFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionProjectFilterInput]
  or: [ModelSubscriptionProjectFilterInput]
  projectSquadId: ModelSubscriptionIDInput
}

type Subscription {
  onCreateSquad(filter: ModelSubscriptionSquadFilterInput): Squad @aws_subscribe(mutations: ["createSquad"])
  onUpdateSquad(filter: ModelSubscriptionSquadFilterInput): Squad @aws_subscribe(mutations: ["updateSquad"])
  onDeleteSquad(filter: ModelSubscriptionSquadFilterInput): Squad @aws_subscribe(mutations: ["deleteSquad"])
  onCreateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["deleteComment"])
  onCreateProject(filter: ModelSubscriptionProjectFilterInput): Project @aws_subscribe(mutations: ["createProject"]) @aws_iam @aws_cognito_user_pools
  onUpdateProject(filter: ModelSubscriptionProjectFilterInput): Project @aws_subscribe(mutations: ["updateProject"]) @aws_iam @aws_cognito_user_pools
  onDeleteProject(filter: ModelSubscriptionProjectFilterInput): Project @aws_subscribe(mutations: ["deleteProject"]) @aws_iam @aws_cognito_user_pools
  onCreatePost(filter: ModelSubscriptionPostFilterInput, email: String): Post @aws_subscribe(mutations: ["createPost"]) @aws_api_key @aws_cognito_user_pools
  onUpdatePost(filter: ModelSubscriptionPostFilterInput, email: String): Post @aws_subscribe(mutations: ["updatePost"]) @aws_api_key @aws_cognito_user_pools
  onDeletePost(filter: ModelSubscriptionPostFilterInput, email: String): Post @aws_subscribe(mutations: ["deletePost"]) @aws_api_key @aws_cognito_user_pools
}

type ModelSquadConnection {
  items: [Squad]!
  nextToken: String
}

input ModelSquadFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelSquadFilterInput]
  or: [ModelSquadFilterInput]
  not: ModelSquadFilterInput
}

input ModelSquadConditionInput {
  name: ModelStringInput
  and: [ModelSquadConditionInput]
  or: [ModelSquadConditionInput]
  not: ModelSquadConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateSquadInput {
  id: ID
  name: String!
}

input UpdateSquadInput {
  id: ID!
  name: String
}

input DeleteSquadInput {
  id: ID!
}

input ModelSubscriptionSquadFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionSquadFilterInput]
  or: [ModelSubscriptionSquadFilterInput]
}

type ModelPostConnection @aws_api_key @aws_cognito_user_pools {
  items: [Post]!
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
  email: ModelStringInput
}

input ModelPostConditionInput {
  title: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  email: ModelStringInput
}

input CreatePostInput {
  id: ID
  title: String!
}

input UpdatePostInput {
  id: ID!
  title: String
}

input DeletePostInput {
  id: ID!
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
  email: ModelStringInput
}

type ModelCommentConnection @aws_cognito_user_pools @aws_api_key {
  items: [Comment]!
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  postID: ModelIDInput
  content: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input ModelCommentConditionInput {
  postID: ModelIDInput
  content: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateCommentInput {
  id: ID
  postID: ID!
  content: String!
}

input UpdateCommentInput {
  id: ID!
  postID: ID
  content: String
}

input DeleteCommentInput {
  id: ID!
}

input ModelSubscriptionCommentFilterInput {
  id: ModelSubscriptionIDInput
  postID: ModelSubscriptionIDInput
  content: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionCommentFilterInput]
  or: [ModelSubscriptionCommentFilterInput]
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
